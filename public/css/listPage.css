.wrapper {
  --gap: 1.5rem;
}

.summary {
  display: none;
}

.summary.active {
  display: block;
}

.project:has(.title),
.talk:has(.title) {
  width: 100%;
  max-width: 100vw;
  display: grid;
  grid-template-columns: 1fr 20ch;
  grid-gap: 2rem;
  grid-template-rows: auto;
  min-height: 10rem;
  max-height: fit-content;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.talk:has(.title) {
  min-height: 5rem;
  grid-template-rows: auto;
}

.project .summary {
  display: block;
  grid-column: 1;
  /* grid-row: 2 / 4; */
}

.archived {
  /* background-color: var(--blue-0); */
  /* color: var(--blue-4); */
  opacity: 0.6;
  /* --banner-line-color: var(--blue-4); */
  /* --banner-text-color: var(--blue-4); */
}

.links {
  grid-column: 2;
  grid-row: span 2;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-end;
  height: 100%;
  gap: 0.75rem;
}

.talk > .links {
  grid-row: 1;
}

ul:not([class]) li {
  max-inline-size: 100%;
}

:not(nav) > ul > * + * {
  margin-top: 2.15rem;
}

ul.boxes {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 1.5rem;
  margin: 0;
  padding: 0;
  list-style: none;
}
/* 
ul.boxes li,
.links a {
  padding: 1.5rem;
  border-left: 2px solid var(--blue-7);
  border-bottom: 2px solid var(--blue-7);
  border-right: 2px solid var(--blue-7);
  border-top: 2px solid var(--blue-7);
  margin: 0;
  transition: all 0.25s ease;
}

ul.boxes li:hover,
.links a:hover {
  border-left: 2rem solid var(--blue-7);
  padding-right: 0;
  padding-left: 0.5rem;
} */

.links a {
  width: 100%;
  /* text-align: center; */
}

ul.boxes li:has(.summary.active):hover {
  border-left: 1rem solid var(--blue-7);
  padding-right: 1.5rem;
  padding-left: 0.75rem;
}

/* ul.boxes li:after {
  display: none;
} */

.title {
  /* font-size: 1.5rem; */
  /* line-height: 2rem; */
  margin: 0;
  grid-column: 1/2;
  grid-row: 1;
}

li.note {
  /* width: fit-content; */
  display: block;
  margin-inline-end: 1.5rem;
  padding: 0 1.5rem;
  position: relative;
  /* border-left: 2px solid;
  border-bottom: 2px solid;
  border-right: 2px solid;
  border-top: 2px solid; */
  margin: 0;
  /* max-width: 10ch; */
  /* max-inline-size: 40ch !important; */
}

li.note:hover {
  /* border-left: 1ch solid var(--blue-7);
  border-color: var(--blue-7);
  background-color: var(--blue-0);
  padding-right: 1.5rem;
  padding-left: calc(1.5rem - 1ch); */
}

li.note:before {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  /* background-color: var(--blue-4); */
  border: 2px solid var(--blue-4);
  animation: list-glitch2 2.5s infinite;
  transition: all 0.25s ease;
}

li.note:after {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: 2px solid var(--glitch-off-color, #67f3da);
  animation: list-glitch3 2.5s infinite;
  /* background-color: var(--blue-4); */
  transition: all 0.25s ease;
}

li.note:hover:before,
li.note:hover:after {
  height: calc(100% + 2px);
}

ul:has(.note) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 1.5rem;
}

ul:has(.note) li:not(.note) {
  grid-column: -1/1;
}

ul:has(.note) li.note {
  grid-column: span 1;
}

span.count-posts {
  position: relative;
  display: inline-block;
  padding-left: 1rem;
}

span.count-posts:before {
  content: "";
  position: absolute;
  position: absolute;
  left: 0ch;
  top: 0.75ex;
  height: 1ex;
  width: 1ex;
  /* background-color: var(--marker-color, var(--blue-0)); */
  border: 2px solid var(--marker-color, var(--blue-4));
}

span.count-notes {
  position: relative;
  display: inline-block;
  /* padding-left: 1rem; */
  padding-inline: 0.25rem;
  /* margin-inline-start: 0.25rem; */
}

span.count-notes:before {
  content: "";
  position: absolute;
  border-left: 2px solid;
  border-bottom: 2px solid;
  border-right: 2px solid;
  border-top: 2px solid;
  left: 0;
  width: 100%;
  height: 100%;
  transition: all 0.25s ease;
  border-color: var(--blue-4);
}

ul.no-marker li:not(:last-of-type) {
  position: relative;
}

ul.no-marker li:not(:last-of-type)::before,
ul.no-marker li:not(:last-of-type)::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 2px;
  border-bottom: 2px solid;
  top: calc(100% + 1rem);
  left: 0;
  overflow: hidden;
}

ul.no-marker li:not(:last-of-type)::before {
  border-color: var(--glitch-off-color, #f16f6f);
  animation: list-glitch1 3.5s infinite;
}

ul.no-marker li:not(:last-of-type)::after {
  border-color: var(--glitch-off-color, #67f3da);
  animation: list-glitch2 2.5s infinite;
  animation-delay: 0.5s;
}

/* ul.no-marker li:before {
  display: none;
}

ul.no-marker li {
  position: relative;
}

ul.no-marker li:not(:last-of-type):after {
  content: "";
  display: block;
  position: absolute;
  width: 100%;
  height: 2px;
  background-color: var(--blue-4);
  top: calc(100% + 1rem);
  left: 0;
} */

/* Toggles from: https://tiny-octopus.com/posts/build-an-accessible-toggle-switch-with-modern-html-and-css-without-javascript/ */

/* 
  Define color variables using CSS custom properties for easy maintenance and theming.
  This allows for quick updates and supports light/dark mode switching.
*/
:root {
  --color-toggle-bg-default: var(--blue-0);
  --color-toggle-bg-checked: var(--blue-7);
  --color-toggle-border: var(--blue-12);
  --color-focus-ring: var(--blue-12);
  --color-icon-checkmark: var(--stone-0);
  --color-icon-cross: var(--blue-12);
}

/* 
  Set up the basic structure of the toggle component. 
  Using flexbox to align items and create spacing between the elements.
*/
.toggle {
  display: flex;
  align-items: center;
  position: relative;
  cursor: pointer;
  gap: 1rem;
  flex-wrap: wrap;
}

/* 
  Hide the actual checkbox input but keep it accessible.
  Position it absolutely to cover the toggle switch area, making the entire area clickable.
*/
.toggle__input {
  position: absolute;
  opacity: 0;
  width: 100%;
  height: 100%;
}

/* 
  Styling the visual representation of the toggle switch.
  Using CSS variables for sizing and spacing, and applying a smooth transition for state changes.
*/
.toggle__display {
  --offset: 0.25em;
  --diameter: 1.8em;

  display: inline-flex;
  align-items: center;
  justify-content: space-around;
  box-sizing: content-box;
  width: calc(var(--diameter) * 2 + var(--offset) * 2);
  height: calc(var(--diameter) + var(--offset) * 2);
  border: 0.1em solid var(--color-toggle-border);
  position: relative;
  border-radius: 100vw;
  background-color: var(--color-toggle-bg-default);
  transition: background-color 250ms, transform 250ms;
}

/* 
  The knob inside the toggle switch, which moves when toggled.
  Positioned absolutely inside the switch and centered vertically.
*/
.toggle__display::before {
  content: "";
  z-index: 2;
  position: absolute;
  top: 50%;
  inset-inline-start: var(--offset);
  box-sizing: border-box;
  width: var(--diameter);
  height: var(--diameter);
  border: 0.1em solid var(--color-toggle-border);
  border-radius: 50%;
  background-color: white;
  transform: translateX(0) translateY(-50%);
  will-change: transform;
  transition: transform 250ms;
}

/* 
  Focus-visible is used to apply the focus ring only when navigating via keyboard.
  This prevents the focus ring from appearing during mouse clicks, enhancing the visual experience.
*/
.toggle__input:focus-visible + .toggle__display {
  outline: 2px solid var(--color-focus-ring);
  outline-offset: 4px;
}

/* 
  Change the background color when the toggle is checked (active state).
  This applies the green color to indicate the "on" state.
*/
.toggle__input:checked + .toggle__display {
  background-color: var(--color-toggle-bg-checked);
}

/* 
  Move the knob to the right when the toggle is checked.
  This visually represents the "on" state.
*/
.toggle__input:checked + .toggle__display::before {
  transform: translateX(100%) translateY(-50%);
}

/* 
  Styling for the icons inside the toggle (e.g., checkmark and cross).
  Using inline-block for flexibility and inheriting colors for easy theming.
*/
.toggle__icon {
  display: inline-block;
  width: 1em;
  height: 1em;
  color: inherit;
  fill: currentcolor;
  vertical-align: middle;
  overflow: hidden;
}

/* 
  Specific styling for the "cross" icon (used for "off" state).
  A slightly smaller size and dark red color.
*/
.toggle__icon--cross {
  color: var(--color-icon-cross);
  font-size: 85%;
}

/* 
  Specific styling for the "checkmark" icon (used for "on" state).
  A dark green color that contrasts well with the light green background.
*/
.toggle__icon--checkmark {
  color: var(--color-icon-checkmark);
}

.onecol:has(.toggle:only-child) {
  display: grid;
  place-content: center;
  height: 100%;
}

#filters {
  padding: 0;
}

/* #filters > h2 {
  margin-block-end: 0.75rem;
}

#filters > .toggle + .toggle {
  margin-top: 1rem;
} */

/* #blogroll {
  height: fit-content;
  position: sticky;
  top: 0;
  grid-row: span 2;
} */

/* Styled radio buttons from: https://moderncss.dev/pure-css-custom-styled-radio-buttons/ */

li.new {
  transition: height 0.5s ease, color 2.5s ease;
  /* transform: translate3d(0, 0, 0); */
  height: 100%;
  color: var(--text);

  @starting-style {
    height: 0;
    color: transparent;
    /* transform: translate3d(-10rem, 0, 0); */
  }
}

@media (prefers-reduced-motion: reduce) {
  li.new {
    transition: background-color 0.75s ease;
    background-color: transparent;
  }

  @starting-style {
    li.new {
      transform: none;
      background-color: var(--blue-0);
    }
  }
}

@media (max-width: 768px) {
  .project:has(.title),
  .talk:has(.title) {
    grid-template-columns: 1fr;
    grid-template-rows: auto;
    padding-inline: 0;
  }

  .project .summary {
    grid-column: 1;
    grid-row: 3;
  }

  .talk .title {
    grid-column: 1;
    grid-row: 1;
  }

  .talk > .links {
    grid-column: 1;
    grid-row: 2;
  }

  .links {
    grid-column: 1;
    grid-row: 2;
  }
}
