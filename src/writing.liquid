---
title: Writing
layout: layouts/list.liquid
css: listPage.css
eleventyExcludeFromCollections: true
---
<section class="threecol flow">
  <div>
    <h1>Writing</h1>
    <p>A collection of ideas, inspirations, notes, and blog posts.</p>
    <p>I also keep a list of recent articles I've read over on the
      <a data-glitch="/Reading" href="/reading">
        <span>/reading</span>
      </a>
      &nbsp;page of this website.</p>
  </div>

  <aside class="banner outline callout">
    <p class="title">RSS</p>
    <p>This blog has a mixture of longer form blog posts, and shorter notes that include monthly summaries of my life. You can subscribe to some, or all, of the content using the RSS feeds below:</p>
    <ul>
      <li><a href="/feed.xml">RSS: All posts and notes</a></li>
      <li><a href="/feed-posts.xml">RSS: Only posts - No monthly updates or link posts.</a></li>
      <li><a href="/feed-notes.xml">RSS: Only notes - No long, meandering blog posts.</a></li>
    </ul>
  </aside>
</section>


{% comment %} <span class="threecol underline"></span> {% endcomment %}

<section class="threecol">
  <aside class="underline" data-gaw-remove>
    <p>Filters:
    </p>
    <div class="" id="filters">
      <label
        data-gaw-remove
        for="show-all"
        class="form-control">
        <input
          type="radio"
          name="filter"
          id="show-all"
          value="all"
          checked />
        Show all {{ collections.post | size }} posts & notes
      </label>
      <label
        data-gaw-remove
        for="show-posts"
        class="form-control">
        <input
          type="radio"
          name="filter"
          id="show-posts"
          value="posts" />
        Show only {{ collections.post | filterOnlyTag: "post", "note" | size }} posts
      </label>
      <label
        data-gaw-remove
        for="show-notes"
        class="form-control">
        <input
          type="radio"
          name="filter"
          id="show-notes"
          value="notes" />
        Show only {{ collections.post | filterOnlyTag: "note" | size }} notes
      </label>
    </div>
  </aside>

  {% assign postslist = collections.post | sortByPublishedDate %}
  <ul>
    {% for post in postslist %}
      {% assign tags = post.data.tags %}
      {% assign isNote = tags | find: "note" %}
      <li style="--local-delay: {% random %}ms; --local-direction: {% direction %};" class="
      {%- if post.data.archived -%}{{"archived " | raw}}{%- endif -%} 
      {%- if isNote == "note" -%}note{%- else -%}post{%- endif -%}
        ">
        <div>
          <small class="post-type">
            {% if isNote == "note" %}
              Note
            {% else %}
              Post
            {% endif %}
          </small>
        </div>
        <p class="title">
          <a href="{{ post.url }}">{{ post.data.title }}</a>
        </p>
        <small>
          <time class="postlist-date" datetime="{{ post.data.published | date_to_rfc822 }}">{{ post.data.published | date_to_long_string }}</time>
          {% if post.data.archived %}
            |
            <strong>
              Archived
            </strong>
          {% endif %}
        </small>
        {% unless post.data.archived %}
          {% if post.data.summary %}
            <p>{{ post.data.summary }}</p>
          {% endif %}
        {% else %}
          <p>
            This post is archived.
            {{ post.data.archiveNote }}</p>
        {% endunless %}
      </li>
    {% endfor %}
  </ul>
</section>

<script>
  const showPosts = document.getElementById('show-posts');
  const showNotes = document.getElementById('show-notes');
  const showAll = document.getElementById('show-all');
  const posts = document.querySelectorAll('.post');
  const notes = document.querySelectorAll('.note');

  function handleChange(event) {
    console.log('Selected option:', event.target.value);
    if (event.target.value === 'posts') {
      posts.forEach(post => {
        post.classList.remove('visually-hidden');
      });
      notes.forEach(note => {
        note.classList.add('visually-hidden');
      });
    } else if (event.target.value === 'notes') {
      posts.forEach(post => {
        post.classList.add('visually-hidden');
      });
      notes.forEach(note => {
        note.classList.remove('visually-hidden');
      });
    } else {
      posts.forEach(post => {
        post.classList.remove('visually-hidden');
      });
      notes.forEach(note => {
        note.classList.remove('visually-hidden');
      });
    }
  }


  showPosts.addEventListener('change', handleChange);
  showNotes.addEventListener('change', handleChange);
  showAll.addEventListener('change', handleChange);
</script>